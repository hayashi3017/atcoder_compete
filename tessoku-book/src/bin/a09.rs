use proconio::input;

fn main() {
    input! {
        h: usize,
        w: usize,
        abcd: [(usize, usize,usize,usize)]
    }

    // 配列は2つ余白を持たせている、一つは前項を参照できるように、一つは下記のc+1,d+1に対応するため
    let mut v = vec![vec![0isize; w + 2]; h + 2];
    for (a, b, c, d) in abcd {
        // 間違えやすいので注意
        v[a][b] += 1;
        v[a][d + 1] -= 1;
        v[c + 1][b] -= 1;
        v[c + 1][d + 1] += 1;
    }

    // 縦横に1回ずつスライドする必要があるかもしれない
    let mut v1 = vec![vec![0isize; w + 2]; h + 2];
    for i in 1..=h {
        for j in 1..=w {
            v1[i][j] = v[i][j] + v1[i][j - 1];
        }
    }
    for i in 1..=h {
        for j in 1..=w {
            v1[i][j] += v1[i - 1][j];
        }
    }
    for i in 1..=h {
        // コンパイラがサイズを推測できない値はバインドできない
        // let v2 = v1[i][1..=w];
        // 固定サイズにするため参照をバインドする
        // let v2 = &v1[i][1..=w];

        // tips: join()で半角スペース区切りするためにiter.map()で各要素をStringにする
        let v2 = &v1[i][1..=w].iter().map(|x| x.to_string()).collect::<Vec<String>>().join(" ");
        println!("{}", v2);
    }
    // dbg!(&v);
    // [
    //     [0, 0, 0, 0, 0, 0, 0],
    //     [0, 1, 0, 0, -1, 0, 0],
    //     [0, 0, 1, 0, 0, -1, 0],
    //     [0, 0, 0, 0, 0, 0, 0],
    //     [0, -1, 0, 0, 1, 0, 0],
    //     [0, 0, -1, 0, 0, 1, 0],
    //     [0, 0, 0, 0, 0, 0, 0],
    // ]

    // dbg!(&v1);
    // [
    //     [0, 0, 0, 0, 0, 0, 0],
    //     [0, 1, 1, 1, 0, 0, 0],
    //     [0, 1, 2, 2, 1, 0, 0],
    //     [0, 1, 2, 2, 1, 0, 0],
    //     [0, 0, 1, 1, 1, 0, 0],
    //     [0, 0, 0, 0, 0, 0, 0],
    //     [0, 0, 0, 0, 0, 0, 0],
    // ]
}
